@page "/patients/details/{Id:int}"
@using System.Net.Http
@using System.Text.Json
@inject IHttpClientFactory httpClientFactory
@using HospitalManager.Shared.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Doktor")]
@rendermode InteractiveServer

<PageTitle>Patient Details</PageTitle>

@if (patient != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-4">
                <h4>Osobné údaje</h4>
                <ul class="list-unstyled">
                    <li><strong>Meno:</strong> @patient?.Person?.FirstName</li>
                    <li><strong>Priezvisko:</strong> @patient?.Person?.LastName</li>
                    <li><strong>Rodné číslo:</strong> @patient?.Person?.BirthNumber</li>
                    <li><strong>Email:</strong> @patient?.Person?.Email</li>
                    <li><strong>Tel. číslo:</strong> @patient?.Person?.Telephone</li>
                </ul>
            </div>

            <div class="col-md-4">
                <h4>Kontakt</h4>
                <ul class="list-unstyled">
                    <li><strong>Telefón:</strong> @patient?.Person?.Telephone</li>
                    <li><strong>Email:</strong> @patient?.Person?.Email</li>
                </ul>
            </div>

            <div class="col-md-4">
                <h4>Ostatné informácie</h4>
                <ul class="list-unstyled">
                    <li><strong>Lieky:</strong> @patient?.Medications</li>
                    <li><strong>Očkovania:</strong> @patient?.Vaccines</li>
                    <li><strong>Skupina krvi:</strong> @patient?.BloodGroup</li>
                    <li><strong>Alergie:</strong> @patient?.Allergies</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container mt-4">
            <div class="col-md-12 d-flex justify-content-end">
                <button class="btn btn-warning" type="button" data-bs-toggle="offcanvas" data-bs-target="#editPatientOffcanvas" aria-controls="editPatientOffcanvas">
                    Editovať údaje
                </button>
            </div>
    </div>
    
    <div class="container mt-4">
        <h4>Recepty a predpísané lieky</h4>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Nazov</th>
                <th scope="col">Vybraný</th>
                <th scope="col">Dátum vypršania</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var recipe in recipes)
            {
                var medicineNames = GetMedicinesForRecipe(recipe.Medicines); 
                <tr>
                    <td>@recipe.Id</td>
                    <td>
                        @if (medicineNames.Any())
                        {
                            @string.Join(", ", medicineNames)
                        }
                        else
                        {
                            <span>Žiadne lieky</span>
                        }
                    </td>
                    <td>@recipe.Expiration.ToString("dd/MM/yyyy")</td>
                    <td>
                        @if (recipe.Used == 1)
                        {
                        <span class="badge bg-success">Áno</span>
                        }
                        else
                        {
                        <span class="badge bg-danger">Nie</span>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    

    <div class="offcanvas offcanvas-end" tabindex="-1" id="editPatientOffcanvas" aria-labelledby="editPatientOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 id="editPatientOffcanvasLabel">Editovať údaje pacienta</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <EditForm Model="patientForUpdate" OnValidSubmit="HandleValidSubmit">
            <div class="mb-3">
                <label for="FirstName" class="form-label">Meno</label>
                <InputText id="FirstName" class="form-control" @bind-Value="patientForUpdate.FirstName"/>
            </div>
            <div class="mb-3">
                <label for="LastName" class="form-label">Priezvisko</label>
                <InputText id="LastName" class="form-control" @bind-Value="patientForUpdate.LastName" />
            </div>
            <div class="mb-3">
                <label for="Telephone" class="form-label">Tel. číslo</label>
                <InputText id="Telephone" class="form-control" @bind-Value="patientForUpdate.Telephone" />
            </div>
            <div class="mb-3">
                <label for="Allergies" class="form-label">Alergie</label>
                <InputText id="Allergies" class="form-control" @bind-Value="patientForUpdate.Allergies"/>
            </div>
            <div class="mb-3">
                <label for="BloodGroup" class="form-label">Krvná skupina</label>
                <InputText id="BloodGroup" class="form-control" @bind-Value="patientForUpdate.BloodGroup"/>
            </div>
            <div class="mb-3">
                <label for="Medications" class="form-label">Lieky</label>
                <InputText id="Medications" class="form-control" @bind-Value="patientForUpdate.Medications"/>
            </div>
            <div class="mb-3">
                <label for="Vaccines" class="form-label">Očkovania</label>
                <InputText id="Vaccines" class="form-control" @bind-Value="patientForUpdate.Vaccines"/>
            </div>
            <button type="submit" class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#editPatientOffcanvas" aria-controls="editPatientOffcanvas" @onclick="HandleValidSubmit">Uložiť zmeny</button>
        </EditForm>
    </div>
</div>
}

@code {
    [Parameter] public int Id { get; set; }

    public PatientDTO? patient;
    public List<RecipeDTO> recipes = new List<RecipeDTO>();
    public List<MedicineDTO> medicines = new List<MedicineDTO>();
    public List<MedicineDTO> selectedMedicines = new List<MedicineDTO>();
    public PatientForUpdateDTO patientForUpdate  = new PatientForUpdateDTO();
    

    
    protected override async Task OnInitializedAsync()
    {
        var httpClient = httpClientFactory.CreateClient("APIClient");
        try
        {
            //Nacitanie pacienta
            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/patients/{Id}/?expandPerson=True");
            var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
            response.EnsureSuccessStatusCode();
            var responseString = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Odpoveď API: {responseString}");

            patient = JsonSerializer.Deserialize<PatientDTO>(responseString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            
            // Načítanie predpisov
            var recipeRequest = new HttpRequestMessage(HttpMethod.Get, $"api/recipe/?recipesForPatient={Id}");
            var recipeResponse = await httpClient.SendAsync(recipeRequest, HttpCompletionOption.ResponseHeadersRead);
            recipeResponse.EnsureSuccessStatusCode();
            var recipeResponseString = await recipeResponse.Content.ReadAsStringAsync();
            recipes = JsonSerializer.Deserialize<List<RecipeDTO>>(recipeResponseString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            
            // Načítanie liekov
            var medicineRequest = new HttpRequestMessage(HttpMethod.Get, "/api/medicine");
            var medicineResponse = await httpClient.SendAsync(medicineRequest, HttpCompletionOption.ResponseHeadersRead);
            medicineResponse.EnsureSuccessStatusCode();
            var medicineResponseString = await medicineResponse.Content.ReadAsStringAsync();
            medicines = JsonSerializer.Deserialize<List<MedicineDTO>>(medicineResponseString, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            Console.WriteLine("Loaded medicines:");
            foreach (var medicine in medicines)
            {
                Console.WriteLine($"ID: {medicine.Id}, Name: {medicine.Name}");
            }


            if (patient?.Person == null)
            {
                patient.Person = new PersonDTO();
            }

            patientForUpdate.FirstName = patient.Person.FirstName;
            patientForUpdate.LastName = patient.Person.LastName;
            patientForUpdate.Telephone = patient.Person.Telephone;
            patientForUpdate.Allergies = patient.Allergies;
            patientForUpdate.BloodGroup = patient.BloodGroup;
            patientForUpdate.Medications = patient.Medications;
            patientForUpdate.Vaccines = patient.Vaccines;
            
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Chyba pri načítaní údajov: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Neočakávaná chyba: {ex.Message}");
        }
    }
    private async Task HandleValidSubmit()
    {
        Console.WriteLine("Submit");
        var httpClient = httpClientFactory.CreateClient("APIClient");
        
        patientForUpdate.BirthNumber = patient.BirthNumber;
        patientForUpdate.Email = patient.Person.Email;
        try
        {
            var response = await httpClient.PatchAsJsonAsync($"/api/patients/{Id}", patientForUpdate);
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("GG");
            }
            else
            {
                Console.WriteLine("BG");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error:" + ex.Message);
        }
    }

    private List<string> GetMedicinesForRecipe(IEnumerable<int> medicineIds)
    {
        var medicineNames = new List<string>();

        // Prejdeme cez všetky ID liekov a získame ich názvy
        foreach (var medId in medicineIds)
        {
            var medicine = medicines.FirstOrDefault(m => m.Id == medId);
            if (medicine != null)
            {
                medicineNames.Add(medicine.Name);  // Pridáme názov lieku do zoznamu
            }
        }

        return medicineNames;  // Vrátime zoznam názvov liekov
    }


    
    
}