@page "/medicine"
@attribute [Authorize(Roles = "Doktor")]
@attribute [StreamRendering]
@using System.Text.Json
@using System.Xml.Linq
@using Microsoft.AspNetCore.Authorization
@using HospitalManager.Shared.Models
@rendermode InteractiveServer

@inject IHttpClientFactory httpClientFactory

<h1 class="text-center my-4">Zoznam Liekov</h1>
<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
            <tr>
                <th>Kód</th>
                <th>Názov</th>
                <th>Doplnok</th>
                <th>Stavový kód</th>
                <th>Registračné číslo</th>
                <th>Expirácia</th>
                <th>Recept</th>
                <th>Dátum registrácie</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var medicine in PaginatedMedicines)
            {
            <tr>
                <td>@medicine.Code</td>
                <td>@medicine.Name</td>
                <td>@medicine.Complement</td>
                <td>@medicine.StateCode</td>
                <td>@medicine.RegCode</td>
                <td>@medicine.Expiration</td>
                <td>@medicine.Recipe</td>
                <td>@medicine.RegistrationDate.ToString("dd.MM.yyyy")</td>
            </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-center">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage">Predchádzajúca</button>
                </li>
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Ďalšia</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    private List<MedicineImportDTO> PaginatedMedicines = new();
    private int CurrentPage { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 10;
    private int TotalPages { get; set; }
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadPageData();
    }

    private async Task LoadPageData()
    {
        var httpClient = httpClientFactory.CreateClient("APIClient");
        try
        {
            var response = await httpClient.GetAsync($"api/medicine-import?pageNumber={CurrentPage}&pageSize={ItemsPerPage}");
            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();

            var paginationData = JsonSerializer.Deserialize<MedicineImportPaginatedDTO>(
                responseString,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            );

            if (paginationData != null)
            {
                PaginatedMedicines = paginationData.Results.ToList();
                CurrentPage = paginationData.CurrentPage;
                TotalPages = paginationData.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }


    private async Task PreviousPage()
    {
        if (HasPreviousPage)
        {
            Console.WriteLine($"Previous page clicked. Current page: {CurrentPage}");
            CurrentPage--;
            await LoadPageData();
        }
        else
        {
            Console.WriteLine("No previous page available.");
        }
    }

    private async Task NextPage()
    {
        if (HasNextPage)
        {
            Console.WriteLine($"Next page clicked. Current page: {CurrentPage}");

            CurrentPage++;
            await LoadPageData();
        }
        else
        {
            Console.WriteLine("No next page available.");

        }
    }
}
