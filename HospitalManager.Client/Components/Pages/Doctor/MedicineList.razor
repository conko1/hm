@page "/medicine"
@attribute [Authorize(Roles = "Doktor")]
@attribute [StreamRendering]
@using System.Text.Json
@using HospitalManager.Shared.Models
@using System.Xml;
@using System.Xml.Linq
@using Microsoft.AspNetCore.Authorization

@inject IHttpClientFactory httpClientFactory

<h1 class="text-center my-4">Zoznam Liekov</h1>
<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead>
            <tr>
                <th>Kód</th>
                <th>Názov</th>
                <th>Doplnok</th>
                <th>Registračné číslo</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var medicine in PaginatedMedicines)
            {
            <tr>
                <td>@medicine.sukl_kod</td>
                <td>@medicine.nazov</td>
                <td>@medicine.doplnok</td>
                <td>@medicine.reg_cislo</td>
            </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-center">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                </li>

                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Next</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

@code {
    private List<Medicine> Medicines = new();
    private int CurrentPage { get; set; } = 1;
    private int ItemsPerPage { get; set; } = 10;  

    private int TotalPages => (int)Math.Ceiling((double)Medicines.Count / ItemsPerPage);
    private List<Medicine> PaginatedMedicines => Medicines.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
    
    protected string CustomUrl { get; set; } = "https://api.sukl.sk/Webservice2.asmx/GetZoznamLiekov"; 
    protected override async Task OnInitializedAsync()
    {
        var httpClient = httpClientFactory.CreateClient("APIClient");

        if (string.IsNullOrWhiteSpace(CustomUrl))
        {
            Console.WriteLine("No URL provided.");
            return;
        }
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, CustomUrl);
            var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
            response.EnsureSuccessStatusCode();
            var responseString = await response.Content.ReadAsStringAsync();

            var xDoc = XDocument.Parse(responseString);
            
            Medicines = xDoc.Descendants("zoznam_liekov")
                .Select(x => new Medicine
                {
                    sukl_kod = x.Element("sukl_kod")?.Value,
                    nazov = x.Element("nazov")?.Value,
                    doplnok = x.Element("doplnok")?.Value,
                    reg_cislo = x.Element("reg_cislo")?.Value
                }).ToList();
            
            Console.WriteLine($"Fetched {Medicines.Count} medicines.");
            StateHasChanged(); 
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--; 
            StateHasChanged(); 
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++; 
            StateHasChanged(); 
        }
    }

    public class Medicine
    {
        public string? sukl_kod { get; set; }
        public string? nazov { get; set; }
        public string? doplnok { get; set; }
        public string? reg_cislo { get; set; }
    }   
}
