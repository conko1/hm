@using System.Text
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication.OpenIdConnect
@using Microsoft.IdentityModel.Protocols.OpenIdConnect

@inject IHttpClientFactory httpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Home> _logger
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

@page "/"

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<div class="container px-4 py-5" id="featured-3">
    <h2 class="pb-2 border-bottom">Nemocničný informačný systém</h2>
    <div class="row g-4 py-5 row-cols-1 row-cols-lg-3">
        <div class="feature col">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-people" viewBox="0 0 16 16">
                <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1zm-7.978-1L7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002-.014.002zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4m3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0M6.936 9.28a6 6 0 0 0-1.23-.247A7 7 0 0 0 5 9c-4 0-5 3-5 4q0 1 1 1h4.216A2.24 2.24 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816M4.92 10A5.5 5.5 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275ZM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0m3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4"/>
            </svg>
            <h3 class="fs-2 text-body-emphasis">Pacienti</h3>
            <NavLink href="@($"/patients")" class="btn btn-link">Prejsť na stránku</NavLink>
        </div>
        <div class="feature col">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-capsule" viewBox="0 0 16 16">
                <path d="M1.828 8.9 8.9 1.827a4 4 0 1 1 5.657 5.657l-7.07 7.071A4 4 0 1 1 1.827 8.9Zm9.128.771 2.893-2.893a3 3 0 1 0-4.243-4.242L6.713 5.429z"/>
            </svg>
            <h3 class="fs-2 text-body-emphasis">Lieky</h3>
            <NavLink href="@($"/medicine")" class="btn btn-link">Prejsť na stránku</NavLink>
        </div>
        <div class="feature col">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-person-square" viewBox="0 0 16 16">
                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/>
                <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1v-1c0-1-1-4-6-4s-6 3-6 4v1a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1z"/>
            </svg>
            <h3 class="fs-2 text-body-emphasis">Profil</h3>
            <NavLink href="@($"/profile")" class="btn btn-link">Prejsť na stránku</NavLink>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await LogIdentityInformation();
        var httpClient = httpClientFactory.CreateClient("APIClient");

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "/api/recipe/");
            var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

            response.EnsureSuccessStatusCode();
            var responseString = await response.Content.ReadAsStringAsync();

            Console.WriteLine(responseString);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private async Task LogIdentityInformation()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var context = HttpContextAccessor.HttpContext;
        
        var identityToken  = await context.GetTokenAsync(OpenIdConnectParameterNames.IdToken);
        var accessToken = await context.GetTokenAsync(OpenIdConnectParameterNames.AccessToken);
        var refreshToken = await context.GetTokenAsync(OpenIdConnectParameterNames.RefreshToken);

        var userClaimsStringBuilder = new StringBuilder();
        foreach (var claim in authState.User.Claims)
        {
            userClaimsStringBuilder.Append($"\nClaim type: {claim.Type} - Claim value: {claim.Value}");
        }

        _logger.LogInformation($"Identity token & user claims: \n{identityToken} \n{userClaimsStringBuilder}");
        _logger.LogInformation($"Access token: \n{accessToken}");
        _logger.LogInformation($"Refresh token: \n{refreshToken}");
    }

    private async Task Logout()
    {
        var context = HttpContextAccessor.HttpContext;
        if (context != null)
        {
            await context.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            await context.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme);
        }

        NavigationManager.NavigateTo("/");
    }
}
