@page "/examinations/detail={Id}"
@using System.Text.Json

@rendermode InteractiveServer

@inject IHttpClientFactory httpClientFactory

<h3 class="fw-bold text-primary">Detail vyšetrenia</h3>

<div class="card m-2" style="width: 100%; border-radius: 8px; background-color: #FFFAFA; border: 1px solid #007bff;">
    <div class="card-body">
        <h5 class="card-title fw-bold">Vyšetrenie č.dsf </h5>
        <h6 class="card-subtitle mb-2 text-muted">Dátum: @ExaminationDate</h6>
        <p class="card-text"><strong>Lekár: </strong>@DoctorName</p>
        <p class="card-text"><strong>Zameranie lekára: </strong>@DoctorSpecialization</p>
        <p class="card-text"><strong>Pacient: </strong>@PatientName</p>
        <p class="card-text"><strong>Príznaky:</strong>@Symptoms</p>
        <p class="card-text"><strong>Diagnóza:</strong>@Diagnosis</p>
        <p class="card-text"><strong>Liečba:</strong>@Tretament</p>
        <p class="card-text"><strong>Poznámky:</strong>@Notes</p>
    </div>
</div>

<button type="button" class="btn btn-primary w-25 m-4" @onclick="OnCllickOK">OK</button>

@code {
    [Parameter]
    public string Id { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    public DateTime ExaminationDate { get; set; } = DateTime.MinValue;
    public string DoctorName { get; set; } = "Loading";
    public string DoctorSpecialization { get; set; } = "Loading";
    public string PatientName { get; set; } = "Loading";
    public string Symptoms { get; set; } = "Loading";
    public string Diagnosis { get; set; } = "Loading";
    public string Tretament { get; set; } = "Loading";
    public string Notes { get; set; } = "Loading";


    private Examinations.Examination examination;
    private ProfilPacienta.Profil patient;
    private Doctors.Doctor doctor;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = httpClientFactory.CreateClient("APIClient");

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/api/examination/{Id}");
            var response = await httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
            response.EnsureSuccessStatusCode();
            var responseString = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseString);

            examination = JsonSerializer.Deserialize<Examinations.Examination>(responseString);
            Console.WriteLine("examination id: " + examination.Id);
            Console.WriteLine(examination.Diagnosis);
            Console.WriteLine(examination.Treatment);




            var requestD = new HttpRequestMessage(HttpMethod.Get, $"/api/doctor/{examination.DoctorId}");
            var responseD = await httpClient.SendAsync(requestD, HttpCompletionOption.ResponseHeadersRead);
            responseD.EnsureSuccessStatusCode();
            var responseStringD = await responseD.Content.ReadAsStringAsync();
            Console.WriteLine(responseStringD);

            doctor = JsonSerializer.Deserialize<Doctors.Doctor>(responseStringD);
            Console.WriteLine("doctorId: " + doctor.Id);




            var requestP = new HttpRequestMessage(HttpMethod.Get, $"/api/patients/{examination.PatientId}");
            var responseP = await httpClient.SendAsync(requestP, HttpCompletionOption.ResponseHeadersRead);
            responseP.EnsureSuccessStatusCode();
            var responseStringP = await responseP.Content.ReadAsStringAsync();
            Console.WriteLine(responseStringP);

            patient = JsonSerializer.Deserialize<ProfilPacienta.Profil>(responseStringP);
            Console.WriteLine("patient id: " + patient.Id);


            ExaminationDate = examination.ExaminationDate;
            DoctorName = doctor.BirthNumber;
            DoctorSpecialization = doctor.Specialization;
            PatientName = patient.BirthNumber;//patient.Person.FirstName + " " + patient.Person.LastName;
            Symptoms = examination.Symptoms;
            Diagnosis = examination.Diagnosis;
            Tretament = examination.Treatment;
            Notes = examination.Notes;
        }
        catch (HttpRequestException ex)
        {

            Console.WriteLine($"Request error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    private void OnCllickOK()
    {
        NavigationManager.NavigateTo($"/examinations");
    }
}
